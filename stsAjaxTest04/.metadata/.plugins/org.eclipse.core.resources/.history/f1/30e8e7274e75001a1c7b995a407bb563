package com.example.demo.db;

import java.io.Reader;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import com.example.demo.vo.MemberVo;
import com.example.demo.vo.TransferVo;

public class MemberManager {

	private static SqlSessionFactory factory;
	static {
		try {
			Reader reader = Resources.getResourceAsReader("com/example/demo/db/sqlMapConfig.xml");
			factory = new SqlSessionFactoryBuilder().build(reader);
			reader.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
	public static List<MemberVo> listAll(){
		SqlSession session = factory.openSession();
		List<MemberVo> list = session.selectList("member.selectAll");
		session.close();
		return list;
	}
	
	public static MemberVo selectMemner(String username){
		SqlSession session = factory.openSession();
		MemberVo m = session.selectOne("member.selectMember", username);
		session.close();
		return m;
	}
	
	public static int insertMember(MemberVo m){
		SqlSession session = factory.openSession();
		int re = session.insert("member.insert",m);
		session.commit();
		session.close();
		return re;
	}
	
	
	
	//계좌이체를 위한 메소드
	public static int transfer(TransferVo t) {
		int re = 0;
		SqlSession session = factory.openSession(false);
		re += session.update("account.withdraw",t);	//돈을 출금
		re += session.update("account.deposit", t);	//돈을 입금
		//이 두가지를 모두 만족해야 트랜잭션승일을 받을수 있다
		
		if(re == 2) {
			session.commit();
		}else {
			session.rollback();
		}
		return re;
	}
	
}
