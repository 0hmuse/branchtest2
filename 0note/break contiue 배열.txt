-------------------------<< break 와 continue >>-------------------------------
<< break >>
	switch문과 반복문에서 사용되며
	해당 중괄호를 탈출하라는 의미입니다.
	특정상황이 되면 반복문을 그만 두라는 의미입니다.

<< continue >>
	반복문에서'만' 사용되며
	다음 조건식(증감식)을 판별하라는 의미입니다.
	반복문 속에서 특정상황을 제외시키고자 할때 사용합니다
-------------------------------------------------------------------------------


-------------------------<< 배열 Array >>--------------------------------------
===>	자료형이 같은 기억장소의 모임.

int []a = new int[3];
	==>1차원 배열



int [][]b = new int[4][3];		줄수,칸수
	==>2차원 배열



int [][][]c = new int[2][4][3];
	==>3차원 배열




-------------------------<< 정렬   >>--------------------------------------
===>	같은 자료형을 오름차순, 내림차순으로 다시 배열시킴
	첫번째수를 기준으로 삼아서 두번째수와 비교한다음에 배열시킨다. (만약 두번째수가 첫번째수보다 작으면 그 두수를 바꿔서 두번째수를 첫번째로 재배열시킨다.)
	(i)				(j==i+1)
	


public void run(){
	for(int i=20;i>0;i--){
		System.out.println(i+"초 전입니다");
	}
	try{
		Thread.sleep(1000);	//예외처리
	}catch(Exception e){
	}
}

뒤에서부터 읽어올때 --> i>0


public void run(){
	for(int i=1;i<=10;i++){
		System.out.ptintln(i+"초 입니다");
	}
	try{
		Thread.sleep(1000);	//예외처리
	}catch(Exception e){
	}
}
앞에서부터 읽어갈때 --> i<=10
1,2,3,4,5,6,7,8,9,10 

Thread의 run을 실행시키고 싶으면
.start()를 해야 실행시킬수 있고
run()을 하면 일반매소드처럼 실행시키게되니... .start를 기역하자규!!

Runnable을 implements를 한다면
(다중상속을 할 수 없을때 Thread와 같은 run메소드를 사용하고 같은 형태로)
실행할때 Thread객체를 생성해서 .start()를 해주어야 한다.


Thread(Runnable target) <- 생성자모양
Thread(run을 갖고있는 class).start(); 로 run을 생성시킬 수 있음


또,
Thread(변수); 를 받을 수도 있다
예로 delay 얼마동안 멈출것인가

Thread를 상속받은 클래스2ㄱㅐ를 동시에 start할 수 있다!

각각의 run을 오버라이딩한다음에 
.start해준다