** 서브쿼리에 대하여 설명하세요
쿼리문장안에 또다른 쿼리문장이 있는것
select, from, where절에 올 수 있다
from절에 오는 쿼리는 존재하지않는 테이블로 보아도 됩니다.

==> sql문장안에 포함되는 또다른 sql문을 말합니다
==> select절, from절, where절에 올 수 있어요
==> 데이터가 많은 경우 join보다는 실행속도가 빨라요



** 다중행 연산자에 대하여 설명하세요
=,<,>,<=,>= 대신에 쓰는 in, any(some), all, exists
where절에오는 서브쿼리의 건수가 여러건일때 사용한다

==> 서브쿼리가 where절에 사용되며 서브쿼리의 건수가 여러건일따 사용하는 연산자들 입니다
==> in, any(same), all, exists등이 있어요
==> in은 단일항 연산자에 = 을 대신하는 연산자 입니다
==> any,some 은 비교연산자(>,<,>=,<=)를 대신하는 연산자 이구요
	서브쿼리의 결과가 어떠한 아무거나도 만족하면 
	main쿼리를 실행합니다
==> all은 비교연산자와 같이 사용되며
	서브쿼리의 결과가 모두 만족할때 main쿼리를 실행합니다
==> exists는 서브쿼리의 건수가 존재할 때 main쿼리를 실행하며
	not exists는 서브쿼리의 건수가 존재하지 않을때 main쿼리를 실행합니다

 

** view에 대하여 아는데로 설명하세요
모테이블에서 내가 필요한 요소들만 꺼내어와서 
따로 만들어내는 존재하지 않는 테이블
만약 복잡한 쿼리문의 사용이 잦다면 이름을 준 view로 만들어서
계속해서 사용할 수 있다.

생성시 옵션을 줄 수 있습니다
읽기전용인지 수정,삭제 등을 할 수 있는지

==> 실제론 존재하지않는 가상의 논리적인 테이블을 말합니다
==> 자주사용하는 복잡한 sql명령어를 미리 view를 만들어 두면
	편리하게 사용할 수 있어요
==> 보안유지상 특정테이블에 일부분만 특정사용자에게 권한을 다르게 부여하고 할 때에도
	view를 사용합니다
==> view를 통해서 자료를 추가, 삭제, 수정, 검색 할 수 있어요
==> 기본적으로는 view 생성시의 조건에 맞지 않는 레코드의 추가, 수정이 가능하나
	with check option을 붙이면 방지할 수 있어요
==> view생성시에 with read only옵션을 설정하면 읽기전용의 view를 생성할 수 있어요
